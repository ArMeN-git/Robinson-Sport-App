@page "/match/{EventDbId:int}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using RobinsonSportApp.Core.Constants
@using RobinsonSportApp.Core.Managers.Claims
@using RobinsonSportApp.Core.Managers.EventComments
@using RobinsonSportApp.Core.Managers.EventComments.NewFolder
@using RobinsonSportApp.Core.Managers.Events
@using RobinsonSportApp.Core.Managers.Events.Models
@using RobinsonSportApp.Core.Models
@using RobinsonSportApp.Data.Entities
@using System.Security.Claims
@inject IEventManager eventManager
@inject IEventCommentManager eventCommentManager
@inject IClaimsAccessor claimsAccessor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (eventDetails != null)
{
    <div class="match-card">
        <div class="teams">
            <div class="team team-home">
                @if (eventDetails.Score1 > eventDetails.Score2)
                {
                    <span class="team-name"><b>@eventDetails.Opponent1</b></span>
                }
                else
                {
                    <span class="team-name">@eventDetails.Opponent1</span>
                }
                <img src="@eventDetails.Opponent1Logo" alt="Home Team Logo" class="team-logo">
            </div>
            <div class="score">
                @if (eventDetails.IsPastMatch)
                {
                    <span>@eventDetails.Score1 - @eventDetails.Score2</span>
                }
                else
                {
                    <span>VS</span>
                }
            </div>
            <div class="team team-away">
                <img src="@eventDetails.Opponent2Logo" alt="Away Team Logo" class="team-logo">
                @if (eventDetails.Score2 > eventDetails.Score1)
                {
                    <span class="team-name"><b>@eventDetails.Opponent2</b></span>
                }
                else
                {
                    <span class="team-name">@eventDetails.Opponent2</span>
                }
            </div>
        </div>
        <div class="match-details">
            <span class="match-time">@eventDetails.StartTime.ToString("dddd, MMMM dd, yyyy HH:mm")</span>
            <span class="match-location">@eventDetails.Place</span>
        </div>
        @if (eventDetails.IsLiveMatch)
        {
            <div class="live-indicator">Match is Live Now!</div>
        }
    </div>
    <div class="additional-info">
        @* TODO: think about how to save additional info, or is there a need? *@

        @if (true)
        @* @if (EventDetails.AdditionalInfo != null) *@
        {
            <h2>Additional Information</h2>
            @* <p>@EventDetails.AdditionalInfo</p> *@
        }
    </div>
    <div class="comments-section">
        <h2>Comments</h2>
        <AuthorizeView Context="authContext">
            <Authorized>
                <div class="comment-form">
                    <EditForm class="comment-editform" FormName="Comment" Model="@addCommentModel" OnValidSubmit="@AddEventComment">
                        <DataAnnotationsValidator />

                        <InputTextArea id="comment-textarea"
                                       placeholder="Add a comment..."
                                       rows="3"
                                       @bind-Value="addCommentModel.Comment"
                                       style="padding: 10px; border: 2px solid #ccc; border-radius: 4px; resize: none; width: 100%; box-sizing: border-box;" />
                        <button type="submit">Post Comment</button>
                    </EditForm>
                </div>
            </Authorized>
            <NotAuthorized>
                @{
                    var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
                }
                <a href="Account/Login?returnUrl=@returnUrl">Login to write comments...</a>
            </NotAuthorized>
        </AuthorizeView>

        <div class="comments-list">
            @foreach (var comment in eventDetails.Comments.OrderByDescending(c => c.Id))
            {
                <div class="comment-item">
                    <div class="comment-header">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <p class="comment-author">@comment.User.UserName</p>
                            <div class="comment-actions">
                                <p class="comment-date">@comment.CreatedDate.ToString("MMMM dd, yyyy HH:mm")</p>
                                <AuthorizeView Roles="@Roles.Manager">
                                    <Authorized>
                                        <button class="delete-comment-btn" @onclick="() => DeleteComment(comment.Id)" title="Delete Comment">X</button>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </div>
                    </div>
                    <p class="comment-content">@comment.Comment</p>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>Loading match details...</p>
}

@code {
    [Parameter]
    public int EventDbId { get; set; }

    private int userId;

    private AddCommentModel addCommentModel = new();
    private EventDetailedModel eventDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = Convert.ToInt32(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        eventDetails = await eventManager.GetEventAsync(EventDbId);
    }

    private async Task AddEventComment()
    {
        addCommentModel.UserId = userId;
        addCommentModel.EventId = EventDbId;
        await eventCommentManager.AddCommentAsync(addCommentModel);
        eventDetails = await eventManager.GetEventAsync(EventDbId);
        addCommentModel = new();
        StateHasChanged();
    }

    private async Task DeleteComment(long commentId)
    {
        await eventCommentManager.DeleteCommentAsync(commentId);
        eventDetails.Comments.Remove(eventDetails.Comments.First(c => c.Id == commentId));
        StateHasChanged();
    }
}