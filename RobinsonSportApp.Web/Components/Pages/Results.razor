@page "/results"
@rendermode InteractiveServer
@using RobinsonSportApp.Core.Managers.Events
@using RobinsonSportApp.Core.Managers.Events.Models
@using RobinsonSportApp.Core.Models
@using RobinsonSportApp.Data.Entities
@inject IEventManager eventManager

<PageTitle>Plessis Sports Results</PageTitle>

<div class="game-results-container">
    <div class="filter-bar">
        <select id="sport-type" @onchange="OnSportTypeChange">
            <option>All Sports</option>
            @foreach (var sport in Enum.GetValues(typeof(SportCategory)))
            {
                <option value="@sport.ToString()">@sport.ToString()</option>
            }
        </select>
        <input type="date" id="start-date" @bind="StartDate" />
        <input type="date" id="end-date" @bind="EndDate" />
        <input type="text" placeholder="Team name" @bind="TeamName" @oninput="HandleInput" />
    </div>

    @if (FilteredGames is null)
    {
        <div class="spinner"></div>
    }
    else
    {

        @foreach (var gameGroup in FilteredGames.OrderByDescending(g => g.EndTime).GroupBy(g => g.SportCategory).ToList())
        {
            <h2 class="sport-category">@gameGroup.Key</h2>
            @foreach (var game in gameGroup)
            {
                <div class="game-result-item">
                    <div class="game-info">
                        <span class="game-date">@game.EndTime.ToString("dd MMM yyyy")</span>
                    </div>
                    <div class="team team-home">
                        <img src="@game.Opponent1Logo" alt="Home Team Logo">
                        @if (game.Score1 > game.Score2)
                        {
                            <span class="team-name"><b>@game.Opponent1</b></span>
                        }
                        else
                        {
                            <span class="team-name">@game.Opponent1</span>
                        }
                    </div>
                    <div class="game-score">
                        <span>@game.Score1 - @game.Score2</span>
                    </div>
                    <div class="team team-away">
                        @if (game.Score2 > game.Score1)
                        {
                            <span class="team-name"><b>@game.Opponent2</b></span>
                        }
                        else
                        {
                            <span class="team-name">@game.Opponent2</span>
                        }
                        <img src="@game.Opponent2Logo" alt="Away Team Logo">
                    </div>
                    <div class="game-details-link">
                        <a href="match/@(game.Id)">
                            Details
                        </a>
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    private string SelectedSport { get; set; } = "";
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private string TeamName { get; set; } = "";
    private Timer _debounceTimer;

    private IEnumerable<EventModel> FilteredGames { get; set; }
    private List<EventModel> Games { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Games = await eventManager.GetLiveAndPastEventsAsync();
        FilteredGames = Games;
        _debounceTimer = new Timer(DebounceIntervalElapsed, null, Timeout.Infinite, Timeout.Infinite);
    }

    private void HandleInput(ChangeEventArgs e)
    {
        TeamName = e.Value.ToString();
        _debounceTimer.Change(300, Timeout.Infinite);
    }

    private void DebounceIntervalElapsed(object state)
    {
        if (TeamName.Length >= 3)
        {
            InvokeAsync(() =>
            {
                FilterResults();
                StateHasChanged();
            });
        }
    }

    private void OnSportTypeChange(ChangeEventArgs e)
    {
        SelectedSport = e.Value.ToString();
        FilterResults();
    }

    private void FilterResults()
    {
        FilteredGames = Games
            .Where(game => (string.IsNullOrEmpty(SelectedSport) || SelectedSport == "All Sports" || game.SportCategory.ToString() == SelectedSport))
            .Where(game => !StartDate.HasValue || game.StartTime >= StartDate)
            .Where(game => !EndDate.HasValue || game.EndTime <= EndDate)
            .Where(game => string.IsNullOrEmpty(TeamName) || game.Opponent1.Contains(TeamName, StringComparison.OrdinalIgnoreCase) || game.Opponent2.Contains(TeamName, StringComparison.OrdinalIgnoreCase));

        StateHasChanged();
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}
