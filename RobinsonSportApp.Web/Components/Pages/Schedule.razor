@page "/schedule"
@using RobinsonSportApp.Core.Models
@rendermode InteractiveServer

<PageTitle>Plessis Sports Schedule</PageTitle>

<div class="select-button-desktop" style="text-align: center; margin-bottom:10px; margin-top: 100px;">
	<p style="margin-left:40px; font-size:24px; margin-top:10px; text-align:right; font-weight:bold; margin-right: 2.4rem;">@selectedMonth, @selectedYear</p>
	<div style="display: flex; justify-content: space-between;">
		<div style="display: flex;">
			<select class="select-style" style="margin-left: 40px;" @bind="selectedMonth">
				<option selected disabled>Select a month</option>
				@foreach (var kvp in daysInMonth)
				{
					<option value="@kvp.Key">@kvp.Key</option>
				}
			</select>
			<select class="select-style" style="margin-left: 5px;" @bind="selectedYear">
				<option selected disabled>Select a year</option>
				@foreach (var year in years)
				{
					<option value="@year">@year</option>
				}
			</select>
		</div>
		<div class="pagination" style="margin-right: 2.4rem;">
			<button class="page-item page-link button-transition" style="border-radius: 5px;" @onclick="PreviousMonth">Previous</button>
			<button class="page-item page-link" style="border-radius: 5px;" @onclick="NextMonth">Next</button>
		</div>
	</div>
</div>

<div class="select-button-mobile" style="text-align: center; margin-bottom:10px; margin-top: 100px;">
	<p style="margin-left:40px; font-size:24px; margin-top:10px; font-weight:bold; margin-right: 2rem;">@selectedMonth, @selectedYear</p>
	<div>
		<select class="select-style" style="margin-left: 40px; margin-right: 2rem;" @bind="selectedMonth">
			<option value="" selected disabled>Select a month</option>
			@foreach (var kvp in daysInMonth)
			{
				<option value="@kvp.Key">@kvp.Key</option>
			}
		</select>
		
	</div>

	<div>
		<select class="select-style" style="margin-left: 40px; margin-right: 2rem; margin-top:10px" @bind="selectedYear">
		<option selected disabled>Select a year</option>
		@foreach (var year in years)
		{
			<option value="@year">@year</option>
		}
	</select>
	</div>
	<div style="display: flex; justify-content: center; margin-right: 2rem; margin-left: 40px;">
		<div class="pagination" style="margin-top: 10px;">
			<button class="page-item page-link" style="border-radius: 5px;" @onclick="PreviousMonth">Previous</button>
			<button class="page-item page-link" style="border-radius: 5px;" @onclick="NextMonth">Next</button>
		</div>
	</div>
</div>


<ul class="schedule-ul">


@for (int i = 1; i <= daysInMonth[selectedMonth]; i++) {
		bool isPastDate = DateTime.Now.Date > new DateTime(selectedYear, GetMonthNumber(selectedMonth), i);
		bool isTheExactDay = DateTime.Now.Date == new DateTime(selectedYear, GetMonthNumber(selectedMonth), i);
		<li class="@(i%2 == 0 ? "schedule-li" : "schedule-li-2") @(isPastDate ? "schedule-li-past" : "")">
			@if (isTheExactDay){
				<time class="schedule-time" style="font-weight:bold; font-size:30px; font-family:'Times New Roman'">@i</time>
			}
			else
			{
			<time class="schedule-time" style="font-family: 'Times New Roman'">@i</time>
			}
			@foreach (var match in sortedMatches)
			{
				if (i == match.date.Day && GetMonthName(match.date.Month) == selectedMonth && match.date.Year == selectedYear)
				{
					
					<a class="cells-matches" style="text-align: center; padding: 5px; display: block; text-decoration: none; position: relative;" href="" onmouseover="showMatchInfo(this, '@match.matchType <br> @match.firstTeam vs @match.secondTeam', '@match.date <br> @match.place ')" onmouseout="hideMatchInfo()">
					@match.date.ToString("HH:mm")
					@match.firstTeam 
					vs
					@match.secondTeam
					
					
					</a>
				}
			}

		</li>

}
</ul>


<div class="match-info" id="matchInfo">
	<div id="matchInfoContent" style="text-align:center;"></div>
</div>

<script>
	function showMatchInfo(element, title, content) {
		var matchInfo = document.getElementById("matchInfo");
		var matchInfoContent = document.getElementById("matchInfoContent");

		// Set the content of the match info div
		matchInfoContent.innerHTML = "<p class='p-custom-title'>" + title + "</p><p class='p-custom-content'>" + content + "</p>";

		// Show the match info div
		matchInfo.style.display = "block";

		// Set the position of the match info div
		var rect = element.getBoundingClientRect();
		var top = rect.top + window.pageYOffset + element.offsetHeight;
		var left = rect.left + window.pageXOffset;
		matchInfo.style.top = top + "px";
		matchInfo.style.left = left + "px";
		matchInfo.style.width = element.offsetWidth + "px";
	}

	function hideMatchInfo() {
		var matchInfo = document.getElementById("matchInfo");
		// Hide the match info div
		matchInfo.style.display = "none";
	}

	

</script>

@code {
	private string selectedMonth = "April";
	private bool showMonth = false;
	private static int selectedYear = 2024;
	List<int> years = new List<int> { 2024, 2025, 2026, 2027 };
	private static bool leap;
	private void UpdateDaysInMonth()
	{
		leap = ((selectedYear % 4 == 0) && (selectedYear % 100 != 0)) || (selectedYear % 400 == 0);
		daysInMonth["February"] = leap ? 29 : 28;
	}

	Dictionary<string, int> daysInMonth = new Dictionary<string, int>
		{
			{ "January", 31 },
			{ "February", leap ? 29 : 28 },
            { "March", 31 },
			{ "April", 30 },
			{ "May", 31 },
			{ "June", 30 },
			{ "July", 31 },
			{ "August", 31 },
			{ "September", 30 },
			{ "October", 31 },
			{ "November", 30 },
			{ "December", 31 }
		};

	private void OnSelectionChanged(ChangeEventArgs e)
	{
		selectedMonth = e.Value.ToString();
		showMonth = true;
	}
	static private List<Match> Matches = [
		new Match
		{
			matchType = "Football",
			date = new DateTime(2024, 10, 10, 20, 20, 0),
			place = "Stadium of Paris",
			location = "Paris",
			firstTeam = "Spartak",
			secondTeam = "Hrazdan"
		},
	new Match
	{
		matchType = "Basketball",
			date = new DateTime(2024, 12, 14, 20, 20, 0),
			place = "Stadium of Barcelona",
			location = "Barcelona",
			firstTeam = "Lakers",
			secondTeam = "Luiziana"
	},
	new Match
	{
		matchType = "Voleyball",
			date = new DateTime(2024, 11, 1, 16, 5, 0),
			place = "Stadium of Madrid",
			location = "Madrid",
			firstTeam = "Goose",
			secondTeam = "Verginia"
	},
	new Match
	{
			matchType = "Regby",
			date = new DateTime(2024, 9, 1, 4, 5, 0),
			place = "Stadium of Madrid",
			location = "Madrid",
			firstTeam = "Goose",
			secondTeam = "Verginia"
	},
	new Match
	{
			matchType = "Regby",
			date = new DateTime(2024, 9, 1, 3, 5, 0),
			place = "Stadium of Madrid",
			location = "Madrid",
			firstTeam = "Goose",
			secondTeam = "Verginia"
	}
		];

	private string GetMonthName(int month)
	{
		switch (month)
		{
			case 1: return "January";
			case 2: return "February";
			case 3: return "March";
			case 4: return "April";
			case 5: return "May";
			case 6: return "June";
			case 7: return "July";
			case 8: return "August";
			case 9: return "September";
			case 10: return "October";
			case 11: return "November";
			case 12: return "December";
			default: return "";
		}
	}

	private int GetMonthNumber(string monthName)
	{
		switch (monthName.ToLower())
		{
			case "january": return 1;
			case "february": return 2;
			case "march": return 3;
			case "april": return 4;
			case "may": return 5;
			case "june": return 6;
			case "july": return 7;
			case "august": return 8;
			case "september": return 9;
			case "october": return 10;
			case "november": return 11;
			case "december": return 12;
			default: return -1;
		}
	}
	private List<Match> sortedMatches = Matches.OrderBy(match => match.date).ToList();



	private void PreviousMonth()
	{
		var months = daysInMonth.Keys.ToList();
		int currentIndex = months.IndexOf(selectedMonth);
		if (currentIndex > 0)
		{
			selectedMonth = months[currentIndex - 1];
		}
		else if (currentIndex == 0 && selectedYear > 2024)
		{
			selectedMonth = months[11];
			selectedYear -= 1;
			UpdateDaysInMonth();
		}
	}

	// Function to handle clicking on the "Next Month" button
	private void NextMonth()
	{
		var months = daysInMonth.Keys.ToList();
		int currentIndex = months.IndexOf(selectedMonth);
		if (currentIndex < months.Count - 1)
		{
			selectedMonth = months[currentIndex + 1];
		}
		else if (currentIndex == months.Count - 1 && selectedYear <= 2027)
		{
			selectedYear += 1;
			selectedMonth = months[0];
			UpdateDaysInMonth();
		}
	}
}
