@page "/manageEvents"
@using RobinsonSportApp.Core.Managers.Events
@using RobinsonSportApp.Core.Managers.Events.Models
@using RobinsonSportApp.Data.Entities
@rendermode InteractiveServer
@inject IEventManager eventManager
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


 <AuthorizeView Context="authContext"> 
<Authorized>
<div class="form-container">
    <h3>Add a match</h3>
    <select class="select-sport">
        <option>All Sports</option>
        @foreach (var sport in Enum.GetValues(typeof(SportCategory)))
        {
            <option value="@sport.ToString()">@sport.ToString()</option>
        }
    </select>
    <input type="text" class="team-input" placeholder="Team name 1" @bind="FirstTeamName" />
    <input type="text" class="team-input" placeholder="Team name 2" @bind="SecondTeamName" />
    <p>Start date</p>
    <div class="datetime-container">
        <input type="date" class="date-input" @bind="StartDate" />
        <input type="time" class="time-input" @bind="StartTime" />
    </div>
    <p>End date</p>
    <div class="datetime-container">
        <input type="date" class="date-input" @bind="EndDate" />
        <input type="time" class="time-input" @bind="EndTime" />
    </div>
    <input type="text" class="stadium-input" placeholder="Stadium Name" @bind="StadiumName" />
    <input type="text" class="place-input" placeholder="Place" @bind="Location"/>
    <button type="submit" class="btn btn-submit" @onclick="SaveData">Add</button>
</div>
</Authorized>
    <NotAuthorized>
        <div class="form-container">
            <h1>Log in to add an event</h1>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    private string SelectedSport { get; set; } = "";
    private DateTime? StartDate { get; set; }
    private TimeOnly? StartTime { get; set; }
    private DateTime? EndDate { get; set; }
    private TimeOnly? EndTime { get; set; }
    private string FirstTeamName { get; set; } = "";
    private string SecondTeamName { get; set; } = "";
    private string StadiumName { get; set; } = "";
    private string Location { get; set; } = "";

    
    private async Task SaveData()
    {
        try
        {
            var eventModel = new AddEventModel
                {
                    Opponent1 = FirstTeamName,
                    Opponent2 = SecondTeamName,
                    // Opponent1Logo = "path/to/logo1", 
                    // Opponent2Logo = "path/to/logo2", 
                    Score1 = 0, 
                    Score2 = 0, 
                    Place = Location,
                    SportCategory = Enum.Parse<SportCategory>(SelectedSport),
                    StartDate = StartDate.Value.Date, 
                    EndDate = EndDate?.Date,
                    EndTime = EndTime ?? default(TimeOnly) 
                };

            await eventManager.AddEventAsync(eventModel);
            ClearFormInputs();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving event: {ex.Message}");
        }
    }

    private void ClearFormInputs()
    {
        SelectedSport = "";
        StartDate = null;
        StartTime = null;
        EndDate = null;
        EndTime = null;
        FirstTeamName = "";
        SecondTeamName = "";
        StadiumName = "";
        Location = "";
    }
}
